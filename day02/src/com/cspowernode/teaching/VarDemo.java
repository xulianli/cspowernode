package com.cspowernode.teaching;

/**
 * @author 汪洋
 * @Date 2023/3/4 16:11
 * @Description
 * 变量的使用
 * 1.什么是变量
 *  a、它就是内存中数据的名字
 *  b、变量就是在运行之前里面的数据都有可能发生变化的量
 * 2.Java是一种强类型语言，所有的数据必须要定义类型，所谓的类型就是为数据设置空间大小
 * 3.Java中定义变量的语法
 *  类型 变量名 = 数据值;--->byte a = 100;
 * 4.Java中定义变量有哪几种定义方式以及注意事项
 *  a、一次性完成初始化：byte a = 100;
 *  b、先声明后赋值：byte a;a = 100;
 *  c、一次性多个初始化：byte a = 100,b = 200,c = 300;
 *  d、一次性多个声明，但是不允许一次性多个赋值：byte a,b,c;
 *  注意事项：
 *  a、变量必须要赋值了才能用，否则CPU是找不到该变量所对应的数据的；
 *  b、变量的声明只能进行一次，并且变量名不能重复，但是赋值可以写多次，因为变量的值是可以更改的；
 * 5.变量的作用域
 *  a、所谓变量的作用域代表的是这个变量的有效范围
 *      每个变量的作用域就是从它定义的时候开始，到离他最近的左边大括号所对应的右边大括号为止
 *  b、变量作用域的分类
 *      ①.方法里面有效的变量，一旦出了方法就会被回收掉(注意下，定义在if..else类似结构里面的变量
 *      就是出了这个结构就会被回收)：局部变量
 *      ②.类里面有效的变量，在类里面的所有方法里面都有效，除了static方法(static修饰的方法只能访问
 *      被static修饰的变量)：全局变量
 *      注意：全局变量允许和局部变量重名，一旦发生重名，那么访问遵循就近原则
 *      ③.所有的地方都能访问，常量的特点有如下几点：
 *          1.常量名全大写，多个单词下划线隔开；
 *          2.常量一定要用public static final来修饰
 *          3.常量访问的方式是使用类名.常量名来访问的
 *          4.常量定义的位置跟全局变量一样
 *          5.常量不可以被修改
 *
 * 注释快捷键：ctrl+/
 * 快速复制多行快捷键：ctrl+alt+↓
 */
public class VarDemo {
    //2.定义一个全局变量
    int x = 100;
    //3.定义一个常量
    public static final int MAX_VALUE = 9999;
    public static void main(String[] args) {
        //1.变量的定义
        //1.1.一次性定义一个变量
        byte a = 100;
        //1.2.一次性定义多个变量
        byte b = 10,c = 20,d = 30;
        //1.3.先声明后赋值
        byte e;
        //因为a是变量，所以在编译期间，编译器是无法确定该变量一定会大于0的，所以这里对e的赋值就是不确定是否能完成
        //于是下面输出e就会报错
        if(a>0){
            e = 100;
        }
        //当变量没有值的时候，是无法使用该变量的
//        System.out.println(e);
        e = 100;
        //可以为某个变量重复赋值
        e = 127;
        //变量也不能重复声明
//        byte e;
        //1.4.先多个声明，再单个赋值
        byte a1,a2,a3;
        //不允许多个变量的赋值操作
//        a1 = 10,a2 = 20, a3 = 30;
        a1 = 10;
        a2 = 20;
        a3 = 30;
        //2.1.尝试在main方法中访问全局变量
        System.out.println(x);
        //3.1.尝试在static的方法里面来访问常量
        System.out.println(VarDemo.MAX_VALUE);
    }
    void test(){
        //在另外一个test方法里面访问之前在main方法中定义的变量，发现都无法访问，因为超出了作用域
        System.out.println(a);
        //2.2.在其他方法中访问x是可以的
        System.out.println(x);
        //3.2.尝试在非static的方法里面来访问常量
        System.out.println(VarDemo.MAX_VALUE);
    }
    void test1(){
        //定义一个和全局变量同名的变量x
        int x = 0;
        //尝试访问这个x变量
        System.out.println(x);
    }
}
