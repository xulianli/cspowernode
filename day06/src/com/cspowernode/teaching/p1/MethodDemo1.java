package com.cspowernode.teaching.p1;

/**
 * @Author 汪洋
 * @Date 2023/3/10 11:26
 * @Description
 * 方法的使用
 * 0.前言
 *  在我们前面的学习过程中，有过构建main方法的经历，也有过调用其他人给我们提供额外功能的其他方法，比如
 *  Math.max()、sc.nextInt()、ran.nextBoolean()等等方法，也有过快速的创建一个work1()、work2()这些
 *  方法的经历，通过我们所接触到的这些方法，我们对方法其实是能有一个大概的认识的：
 *  a.方法分为自己创建和调用别人的方法这两种使用场景；
 *  b.在调用别人方法的过程中，又分为直接通过类名.方法名的写法以及实例化之后再调用方法的写法；
 *  c.方法其实更像是别人已经写好的各种功能，当我们的业务逻辑需要这些功能的时候，我们就去找来使用即可；
 *  d.方法给我们提供功能的时候，我们还得为其传递一些数据进去，它才能够知道要如何来解决我们的问题；
 *
 * 1.什么是方法
 *  所谓方法，我们也称之为函数，在所有的编程语言中都存在，有些编程语言中名字叫做function、func，方法
 *  的作用其实就是完成某个指定的功能，有一些功能通用性比较强，所以可以单独拿出来作为工具方法来使用，比如
 *  Math里面的所有方法；
 *  在后期，我们创建类的时候，方法同时也代表着类里面的一种行为动作--->后期来讲解
 * 2.方法如何学习
 *  a、学习方法的创建
 *  b、学习方法的调用
 * 3.方法如何创建
 *  方法结构：[修饰词] 返回类型/void 方法名(参数列表){方法体}
 *  a、修饰词：所谓修饰词就是为该方法增加额外功能的一种特殊的关键字，我们常见的修饰词有如下几个：
 *      ①.public:被它修饰的资源能够被任意地方访问，它设置的是这个资源的可访问范围
 *      ②.private:被它修饰的资源能够被当前类里面所访问，它设置的是这个资源的可访问范围
 *      ③.static:被它修饰的资源属于类资源，类资源最大的两个特点，就是可以通过类名.资源名来访问
 *      并且在被它修饰的方法里面只能访问被它修饰的资源；
 *      ④.final:被它修饰的资源属于最终的资源，无法被修改
 *      注意：修饰词可以一个都不要，也可以都写，只要不冲突，而且没有顺序要求
 *  b、返回类型/void：如果你的方法运行完毕之后，不需要给你任何的结果，那么我们就使用void，代表
 *  当前方法没有返回类型，如果你的方法运行完毕之后，还需要把运行结果给调用者用来做其他的操作，那么
 *  就需要写返回类型，你需要返回的值是什么类型，那么返回类型就要大于等于该值的类型；
 *  注意：什么时候写返回类型什么时候写void，将会是同学们学习方法的第一个难关，那么我们学习的时候只需要
 *  多看老师的代码和源码，那么就会慢慢的了解到使用返回类型适合哪些场景，使用void又适合哪些场景，前期
 *  你可以无脑使用void，觉得不对了，再去改成返回类型；
 *  注意：如果你写了返回类型，那么就一定要保证方法里面任何条件判断下都会有return+数据，否则会报错；
 *  c、方法签名：所谓方法签名，指的是方法名+参数列表，Java中判定2个方法是否是重名的依据是看方法签名(
 *  即：如果你的方法名+参数列表都发生了重复才会识别为是同一个方法)
 *  d、参数列表：所谓参数列表其实就是指零个或多个变量的声明，如果有多个，用逗号隔开，虽然我们只声明
 *  但是在方法里面是可以正常使用这些参数的，因为参数的值就是调用者传递过来的数据，然后在这里参数上
 *  接收了这些数据；
 *  e、方法体：方法体尽可能只做一件事情，让方法的功能尽可能独立，如果方法上有定义返回类型，那么在方法体
 *  中就一定要return+数据，如果你方法里面有return，不代表你的方法是设置了返回类型的，比如我们使用return
 *  结束方法；
 *
 */
public class MethodDemo1 {
    static int a;
    public static void main(String[] args) {
        System.out.println("HelloWorld");
        int max = Math.max(3,5);
        work1(2);
        System.out.println(a);
    }

    static private void work1() {
    }
    static private void work1(int a) {//int a = 2
    }
    int work2(){
        if(3>1)
        return 1;
        return 1;
    }
}
