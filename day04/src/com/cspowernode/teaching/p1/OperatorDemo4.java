package com.cspowernode.teaching.p1;

/**
 * @author 汪洋
 * @Date 2023/3/7 10:09
 * @Description
 * 逻辑运算符的短路语句的使用
 * 1.逻辑运算符中的并且的条件是两者都为true，结果就为true，但是我们发现，前面一个表达式为false，程序
 * 也会去执行后面一个表达式，同理，或者是要求其中一个为true，结果就为true，但是我们也发现，前面为true
 * 了，后面的表达式仍然会执行，所以就出了一个优化的逻辑运算符
 * 2.逻辑运算符的短路语句
 *  a.短路逻辑与：&&-->前面表达式为false，后面表达式不执行
 *  b.短路逻辑或：||-->前面表达式为true，后面表达式不执行
 *  总结：在工作当中，我们都是使用短路语句，并且往往会把有可能影响后面运算结果的表达式写前面用来
 *  短路后面的代码；
 * 3.异或的使用-->^
 *  记忆方式：两边相同则为false，否则为true--->异性相吸
 */
public class OperatorDemo4 {
    public static void main(String[] args) {
        int a = 10;
        int b = 20;
        //先看非短路语句的执行结果
//        if(a<10&b++>0){
//        }
        //在看短路语句
//        if(a<10&&b++>0){
//        }
        //先看非短路语句的或者的执行结果
//        if(a>0|b++>0){
//        }
        //再看短路语句
        if(a>0||b++>0){
        }
        System.out.println("a:"+a+",b:"+b);
    }
}
